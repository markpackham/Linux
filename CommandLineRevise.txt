Most common commands

ls
ls -a
ls -t 
ls -t
ls -alt

sort sortMeFile.txt
sort takes the standard input and orders it alphabetically for the standard output.

uniq fileWithDuplicateEntries.txt
“unique” and filters out adjacent, duplicate lines in a file. 

(print working directory)
pwd

cd 

cd ..

mkdir myDirectory

touch myTextFile.txt 

The command line is a text interface for the computer’s operating system. To access the command line, we use the terminal.
A filesystem organizes a computer’s files and directories into a tree structure. It starts with the root directory. 
Each parent directory can contain more child directories and files.
From the command line, you can navigate through files and folders on your computer:
pwd outputs the name of the current working directory.
ls lists all files and directories in the working directory.
cd switches you into the directory you specify.
mkdir creates a new directory in the working directory.
touch creates a new file inside the working directory.


In addition to -a, the ls command has several more options. Here are three common options:
-a - lists all contents, including hidden files and directories
-l - lists all contents of a directory in long format
-t - order files and directories by the time they were last modified.
ls -alt lists all contents, including hidden files and directories, in long format, ordered by the date and time they were last modified.

COPY
cp ~/pictures/picture-*.jpg ~/picture-backup

MOVE
mv wonderwoman.txt batman.txt superhero/

RENAME batman to spiderman
mv batman.txt spiderman.txt 

REMOVE
rm waterboy.txt
REMOVE recursively (great for directories)
rm -r slapstick 

Options modify the behavior of commands:
ls -a lists all contents of a directory, including hidden files and directories
ls -l lists all contents in long format
ls -t orders files and directories by the time they were last modified
Multiple options can be used together, like ls -alt
From the command line, you can also copy, move, and remove files and directories:
cp copies files
mv moves and renames files
rm removes files
rm -r removes directories
Wildcards are useful for selecting groups of files and directories

echo "Hello" 

standard input, abbreviated as stdin, is information inputted into the terminal through the keyboard or input device.
standard output, abbreviated as stdout, is the information outputted after a process is run.
standard error, abbreviated as stderr, is an error message outputted by a failed process.

echo "Hello" > hello.txt
The > command redirects the standard output to a file. Here, "Hello" is entered as the standard input. The standard output "Hello" is redirected by > to the file hello.txt.

cat hello.txt
cat command outputs the contents of a file to the terminal. When you type cat hello.txt, the contents of hello.txt are displayed.

Dump file contents via cat from one file into another
cat oceans.txt > continents.txt
Note that > overwrites all original content in continents.txt. When you view the output data by typing cat on continents.txt, 
you will see only the contents of oceans.txt.


cat glaciers.txt >> rivers.txt
>> takes the standard output of the command on the left and appends (adds) it to the file on the right. 
You can view the output data of the file with cat and the filename.
Here, the the output data of rivers.txt will contain the original contents of rivers.txt with the content of glaciers.txt appended to it.

cat < lakes.txt
< takes the standard input from the file on the right and inputs it into the program on the left. Here, lakes.txt is the standard input for the cat command. The standard output appears in the terminal.


cat volcanoes.txt | wc  
| is a “pipe”. The | takes the standard output of the command on the left, 
and pipes it as standard input to the command on the right. You can think of this as “command to command” redirection.
Here the output of cat volcanoes.txt is the standard input of wc. in turn, 
the wc command outputs the number of lines, words, and characters in volcanoes.txt, respectively.

cat volcanoes.txt | wc | cat > islands.txt 
Multiple |s can be chained together. Here the standard output of cat volcanoes.txt is “piped” to the wc command. 
The standard output of wc is then “piped” to cat. Finally, the standard output of cat is redirected to islands.txt.

cat lakes.txt | sort > sorted-lakes.txt 
Here, the command takes the standard output from cat lakes.txt and “pipes” it to sort. 
The standard output of sort is redirected to sorted-lakes.txt.

sort deserts.txt | uniq
A more effective way to call uniq is to call sort to alphabetize a file, and “pipe” the standard output to uniq. 
Here by piping sort deserts.txt to uniq, 
all duplicate lines are alphabetized (and thereby made adjacent) and filtered out.

grep Mount mountains.txt 
grep stands for “global regular expression print”. It searches files for lines that match a pattern and returns the results. It is also case sensitive. Here, grep searches for “Mount” in mountains.txt.

grep -i Mount mountains.txt
grep -i enables the command to be case insensitive. Here, grep searches for capital or lowercase strings that match Mount in mountains.txt.

grep -R Arctic /home/ccuser/workspace/geography
grep -R searches all files in a directory and outputs filenames and lines containing matched results. -R stands for “recursive”. 
Here grep -R searches the /home/ccuser/workspace/geography directory for the string “Arctic” and outputs 
filenames and lines with matched results.

grep -Rl Arctic /home/ccuser/workspace/geography
grep -Rl searches all files in a directory and outputs only filenames with matched results. 
-R stands for “recursive” and l stands for “files with matches”. Here grep -Rl searches the 
/home/ccuser/workspace/geography directory for the string “Arctic” and outputs filenames with matched results.

sed 's/snow/rain/' forests.txt 
sed stands for “stream editor”. It accepts standard input and modifies it based on an expression, before displaying it as output data. 
It is similar to “find and replace”.
Let’s look at the expression 's/snow/rain/':
s: stands for “substitution”. it is always used when using sed for substitution.
snow: the search string, the text to find.
rain: the replacement string, the text to add in place.
In this case, sed searches forests.txt for the word “snow” and replaces it with “rain.” 
Importantly, the above command will only replace the first instance of “snow” on a line.

sed 's/snow/rain/g' forests.txt 
The above command uses the g expression, meaning “global”. Here sed searches forests.txt for the word 
“snow” and replaces it with “rain”, globally. All instances of “snow” on a line will be turned to “rain
FIND & REPLACE ALL 


Redirection reroutes standard input, standard output, and standard error.

The common redirection commands are:

> redirects standard output of a command to a file, overwriting previous content.
>> redirects standard output of a command to a file, appending new content to old content.
< redirects standard input to a command.
| redirects standard output of a command to another command.
A number of other commands are powerful when combined with redirection commands:

sort: sorts lines of text alphabetically.
uniq: filters duplicate, adjacent lines of text.
grep: searches for a text pattern and outputs it.
sed : searches for a text pattern, modifies it, and outputs it.


*********NANO*********
The command nano hello.txt opens a new text file named hello.txt in the nano text editor.
"Hello, I am nano" is a text string entered in nano through the cursor.
The menu of keyboard commands at the bottom of the window allow us to save changes to hello.txt and exit nano. The ^ stands for the Ctrl key.
Ctrl + O saves a file. ‘O’ stands for output.
Ctrl + X exits the nano program. ‘X’ stands for exit.
Ctrl + G opens a help menu.
clear clears the terminal window, moving the command prompt to the top of the screen.

nano ~/.bash_profile
~/.bash_profile is the name of file used to store environment settings. It is commonly called the “bash profile”. When a session starts, it will load the contents of the bash profile before executing commands.
The ~ represents the user’s home directory.
The . indicates a hidden file.
The name ~/.bash_profile is important, since this is how the command line recognizes the bash profile.
The command nano ~/.bash_profile opens up ~/.bash_profile in nano.
The text echo "Welcome, Jane Doe" creates a greeting in the bash profile, which is saved. 
It tells the command line to echo the string “Welcome, Jane Doe” when a terminal session begins.
The command source ~/.bash_profile activates the changes in ~/.bash_profile for the current session. 
Instead of closing the terminal and needing to start a new session, source makes the changes available right away in the session we are in.

source
The source command can be used to load any functions file into the current shell script or a command prompt.
It read and execute commands from given FILENAME and return.


alias pd="pwd"
The alias command allows you to create keyboard shortcuts, or aliases, for commonly used commands.
Here alias pd="pwd" creates the alias pd for the pwd command, which is then saved in the bash profile. Each time you enter pd, the output will be the same as the pwd command.
The command source ~/.bash_profile makes the alias pd available in the current session.
Each time we open up the terminal, we can use the pd alias.


What happens when you store the following aliases in ~/.bash_profile?
alias hy="history"
hy is set as alias for the history command in the bash profile. The alias is then made available in the current session through source. 
By typing hy, the command line outputs a history of commands that were entered in the current session.
alias ll="ls -la"
ll is set as an alias for ls -la and made available in the current session through source. 
By typing ll, the command line now outputs all contents and directories in long format, including all hidden files.


What happens when you store this in ~/.bash_profile?
export USER="Jane Doe"
environment variables are variables that can be used across commands and programs and hold information about the environment.
The line USER="Jane Doe" sets the environment variable USER to a name “Jane Doe”. 
Usually the USER variable is set to the name of the computer’s owner.
The line export makes the variable to be available to all child sessions initiated from the session you are in. 
This is a way to make the variable persist across programs.
At the command line, the command echo $USER returns the value of the variable. 
Note that $ is always used when returning a variable’s value. 
Here, the command echo $USER returns the name set for the variable.


What happens when this is stored in ~/.bash_profile?
export PS1=">> "
PS1 is a variable that defines the makeup and style of the command prompt.
export PS1=">> " sets the command prompt variable and exports the variable. 
Here we change the default command prompt from $ to >>.
After using the source command, the command line displays the new command prompt.

echo $HOME 
The HOME variable is an environment variable that displays the path of the home directory. 
Here by typing echo $HOME, the terminal displays the path /home/ccuser as output.

echo $PATH
PATH is an environment variable that stores a list of directories separated by a colon. 

env
The env command stands for “environment”, and returns a list of the environment variables for the current user. 
Here, the env command returns a number of variables, including PATH, PWD, PS1, and HOME.


env | grep PATH 
is a command that displays the value of a single environment variable. 
Here the standard output of env is “piped” to the grep command. 
grep searches for the value of the variable PATH and outputs it to the terminal.


The environment refers to the preferences and settings of the current user.
The nano editor is a command line text editor used to configure the environment.
~/.bash_profile is where environment settings are stored. You can edit this file with nano.
environment variables are variables that can be used across commands and programs and hold information about the environment.
export VARIABLE="Value" sets and exports an environment variable.
USER is the name of the current user.
PS1 is the command prompt.
HOME is the home directory. It is usually not customized.
PATH returns a colon separated list of file paths. It is customized in advanced cases.
env returns a list of environment variables.


*****Bash Scripting*******
